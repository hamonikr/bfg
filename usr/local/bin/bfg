#!/bin/bash

# Copyright 2023 Kevin Kim(chaeya@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Program Description:
# This script provides various functionalities for managing a Git repository.
# It allows you to clone a repository, find big files, remove big files, and push changes to the remote repository.

# 사용법을 출력하는 함수
usage() {
  if [[ $LANG == ko_KR* ]]; then
    echo "사용법: $0 [옵션] [파라미터]"
    echo "옵션:"
    echo "--clone REPO_URL: 지정한 Git 저장소를 클론합니다."
    echo "--find-big-files SIZE REPO_PATH: 지정한 크기보다 큰 파일을 저장소에서 찾습니다."
    echo "--remove-big-files SIZE REPO_PATH: 지정한 크기보다 큰 파일을 저장소에서 삭제합니다."
    echo "--push REPO_PATH: 변경 내용을 원격 저장소에 푸시합니다."
    echo "--delete-files FILE_PATTERN REPO_PATH: 저장소에서 일치하는 파일을 삭제합니다."
    echo "--replace-text WORD_LIST_FILE REPO_PATH: 저장소에서 지정한 단어목록 파일에 있는 모든 단어를 ***REMOVED*** 로 표시합니다."    
  else
    echo "Usage: $0 [options] [parameters]"
    echo "Options:"
    echo "--clone REPO_URL: Clone the specified Git repository."
    echo "--find-big-files SIZE REPO_PATH: Find files larger than the specified size in the repository."
    echo "--remove-big-files SIZE REPO_PATH: Remove files larger than the specified size from the repository."
    echo "--push REPO_PATH: Push the changes to the remote repository."
    echo "--delete-files FILE_PATTERN REPO_PATH: Deletes files matching FILE_PATTERN in the repository."
    echo "--replace-text WORD_LIST_FILE REPO_PATH: Replaces words found in WORD_LIST_FILE with ***REMOVED*** in the repository."
  fi
  exit 1
}

# bfg.jar 파일의 절대 경로 설정
BFG_JAR_PATH="$HOME/bin/bfg.jar"

# bin 디렉토리가 없으면 생성
mkdir -p "$HOME/bin"

# bfg.jar 파일이 없을 경우 다운로드
if [ ! -f "$BFG_JAR_PATH" ]; then
  echo "Downloading bfg.jar..."
  curl -o $BFG_JAR_PATH https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
  if [ $? -ne 0 ]; then
    echo "Failed to download bfg.jar. Exiting."
    exit 1
  fi
fi

# 파라미터 파싱
while [ "$1" != "" ]; do
  case $1 in
    --clone )           shift
                        REPO_URL=$1
                        ;;
    --find-big-files )  shift
                        FIND_BIG_FILES=true
                        SIZE=$1
                        ;;
    --remove-big-files ) shift
                        REMOVE_BIG_FILES=true
                        SIZE=$1
                        ;;
    --delete-files )    shift
                        DELETE_FILES=true
                        FILE_PATTERN=$1
                        ;;
    --replace-text )    shift
                        REPLACE_TEXT=true
                        WORD_LIST_FILE=$1
                        ;;                        
    --push )            shift
                        PUSH=true
                        REPO_PATH=$1
                        ;;
    * )                 if [ -d "$1" ]; then
                          REPO_PATH=$1
                        else
                          usage
                        fi
  esac
  shift
done

# Git 저장소 클론
if [ ! -z "$REPO_URL" ]; then
  echo "Cloning repository..."
  CLONE_DIR=$(basename $REPO_URL .git)
  git clone --mirror $REPO_URL $CLONE_DIR.git
  if [ $? -ne 0 ]; then
    echo "Failed to clone repository. Exiting."
    exit 1
  fi
fi

# 큰 파일 찾기
if [ "$FIND_BIG_FILES" = "true" ]; then
  if [ -z "$REPO_PATH" ]; then
    echo "Repository path is not specified. Please specify the repository path as the last parameter."
    exit 1
  fi
  cd "$REPO_PATH" || { echo "Repository path not found. Exiting."; exit 1; }
  
  # 지정한 경로가 Git 저장소인지 확인
  git rev-parse --is-inside-work-tree &>/dev/null
  if [ $? -ne 0 ]; then
    echo "The specified path is not a Git repository. Exiting."
    exit 1
  fi
  
  echo "Finding big files larger than ${SIZE}..."
  java -jar $BFG_JAR_PATH --strip-blobs-bigger-than ${SIZE} --no-blob-protection .
  echo "Check the above output for the list of big files."
fi

# 큰 파일 삭제
if [ "$REMOVE_BIG_FILES" = "true" ]; then
  if [ -z "$REPO_PATH" ]; then
    echo "Repository path is not specified. Please specify the repository path as the last parameter."
    exit 1
  fi
  cd "$REPO_PATH" || { echo "Repository path not found. Exiting."; exit 1; }
  
  # 지정한 경로가 Git 저장소인지 확인
  git rev-parse --is-inside-work-tree &>/dev/null
  if [ $? -ne 0 ]; then
    echo "The specified path is not a Git repository. Exiting."
    exit 1
  fi
  
  echo "Removing big files larger than ${SIZE}..."
  java -jar $BFG_JAR_PATH --strip-blobs-bigger-than ${SIZE} .
  git reflog expire --expire=now --all && git gc --prune=now --aggressive
fi

# 파일 삭제
if [ "$DELETE_FILES" = "true" ]; then
  if [ -z "$REPO_PATH" ]; then
    echo "Repository path not specified. Please specify the repository path as the last parameter."
    exit 1
  fi
  
  echo "Deleting files matching pattern ${FILE_PATTERN}..."
  java -jar $BFG_JAR_PATH --delete-files ${FILE_PATTERN} ${REPO_PATH}
fi

# 텍스트 교체
if [ "$REPLACE_TEXT" = "true" ]; then
  if [ -z "$REPO_PATH" ] || [ -z "$WORD_LIST_FILE" ]; then
    echo "Repository path or word list file not specified."
    exit 1
  fi

  echo "Replacing text as per word list in ${WORD_LIST_FILE}..."
  java -jar $BFG_JAR_PATH --replace-text ${WORD_LIST_FILE} ${REPO_PATH}
fi

# 원격 저장소에 푸시
if [ "$PUSH" = "true" ]; then
  # 지정된 경로가 Git 저장소인지 확인
  cd $REPO_PATH || { echo "Specified path not found. Exiting."; exit 1; }
  git rev-parse --is-inside-work-tree &>/dev/null
  if [ $? -ne 0 ]; then
    echo "This command must be run from the git repository directory."
    echo "The specified directory is not a Git repository. Exiting."
    exit 1
  fi
  
  echo "Pushing changes to remote..."
  git push || { echo "Failed to push changes. Exiting."; exit 1; }
fi