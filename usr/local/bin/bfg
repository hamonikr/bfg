#!/bin/bash

# Copyright 2023 Kevin Kim(chaeya@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Program Description:
# This script provides various functionalities for managing a Git repository.
# It allows you to clone a repository, find big files, remove big files, and push changes to the remote repository.

# 사용법을 출력하는 함수
usage() {
  if [[ $LANG == ko_KR* ]]; then
    echo "사용법: $0 [옵션] [파라미터]"
    echo "옵션:"
    echo "--clone REPO_URL: 지정한 Git 저장소를 클론합니다."
    echo "--find-big-files SIZE: 지정한 크기보다 큰 파일을 저장소에서 찾습니다."
    echo "--remove-big-files SIZE: 지정한 크기보다 큰 파일을 저장소에서 삭제합니다."
    echo "--push: 변경 내용을 원격 저장소에 푸시합니다."
  else
    echo "Usage: $0 [options] [parameters]"
    echo "Options:"
    echo "--clone REPO_URL: Clone the specified Git repository."
    echo "--find-big-files SIZE: Find files larger than the specified size in the repository."
    echo "--remove-big-files SIZE: Remove files larger than the specified size from the repository."
    echo "--push: Push the changes to the remote repository."
  fi
  exit 1
}

# bfg.jar 파일의 절대 경로 설정
BFG_JAR_PATH="$HOME/bin/bfg.jar"

# bin 디렉토리가 없으면 생성
mkdir -p "$HOME/bin"

# bfg.jar 파일이 없을 경우 다운로드
if [ ! -f "$BFG_JAR_PATH" ]; then
  echo "Downloading bfg.jar..."
  curl -o $BFG_JAR_PATH https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
  if [ $? -ne 0 ]; then
    echo "Failed to download bfg.jar. Exiting."
    exit 1
  fi
fi

# 파라미터 파싱
while [ "$1" != "" ]; do
  case $1 in
    --clone )           shift
                        REPO_URL=$(echo $1 | sed 's/\.git$//').git
                        ;;
    --find-big-files )  shift
                        FIND_BIG_FILES=true
                        SIZE=$1
                        ;;
    --remove-big-files ) shift
                        REMOVE_BIG_FILES=true
                        SIZE=$1
                        ;;
    --push )            PUSH=true
                        ;;
    --help )            usage
                        ;;
    * )                 usage
  esac
  shift
done

# Git 저장소 클론
if [ ! -z "$REPO_URL" ]; then
  echo "Cloning repository..."
  CLONE_DIR=$(basename $REPO_URL .git)
  git clone --mirror $REPO_URL $CLONE_DIR.git
  if [ $? -ne 0 ]; then
    echo "Failed to clone repository. Exiting."
    exit 1
  fi
fi

# 큰 파일 찾기
if [ "$FIND_BIG_FILES" = "true" ]; then
  echo "Finding big files larger than ${SIZE}M..."
  cd $REPO_URL.git || { echo "Repository path not found. Exiting."; exit 1; }
  java -jar $BFG_JAR_PATH --strip-blobs-bigger-than ${SIZE}M --no-blob-protection .
  echo "Check the above output for the list of big files."
fi

# 큰 파일 삭제
if [ "$REMOVE_BIG_FILES" = "true" ]; then
  echo "Removing big files..."
  cd $REPO_URL.git || { echo "Repository path not found. Exiting."; exit 1; }
  java -jar $BFG_JAR_PATH --strip-blobs-bigger-than ${SIZE}M .
  git reflog expire --expire=now --all && git gc --prune=now --aggressive
fi

# 원격 저장소에 푸시
if [ "$PUSH" = "true" ]; then
  echo "Pushing changes to remote..."
  git push || { echo "Failed to push changes. Exiting."; exit 1; }
fi
